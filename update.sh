#!/bin/bash
# Derived from https://github.com/docker-library/postgres/blob/master/update.sh
set -Eeuo pipefail

cd "$(dirname "$(readlink -f "$BASH_SOURCE")")"

versions=("$@")
if [ ${#versions[@]} -eq 0 ]; then
  versions=(*/Dockerfile)
fi
versions=("${versions[@]%/Dockerfile}")

for optimized in debian alpine; do
  rm -f _dockerlists_${optimized}.md
  echo " " >_dockerlists_${optimized}.md
  echo "| DockerHub image | Dockerfile | OS | Postgres | PGQ |" >>_dockerlists_${optimized}.md
  echo "| --------------- | ---------- | -- | -------- | --- |" >>_dockerlists_${optimized}.md
done

autogenerated='NOTE: THIS DOCKERFILE IS GENERATED VIA "make update"! PLEASE DO NOT EDIT IT DIRECTLY.'

dockerhublink="https://registry.hub.docker.com/r/zkoesters/postgres-pgq/tags?page=1&name="
githubrepolink="https://github.com/zkoesters/docker-postgres-pgq/blob/master"

# sort version numbers with highest last (so it goes first in .travis.yml)
IFS=$'\n'
versions=($(echo "${versions[*]}" | sort -V))
unset IFS

defaultAlpinenSuite='3.20'
defaultDebianSuite='bookworm-slim'
declare -A debianSuite=(
  [13]='bookworm-slim'
  [14]='bookworm-slim'
  [15]='bookworm-slim'
  [16]='bookworm-slim'
  [17]='bookworm-slim'
)

packagesBase='http://apt.postgresql.org/pub/repos/apt/dists/'

pgqGitHash="$(git ls-remote https://github.com/pgq/pgq.git heads/master | awk '{ print $1}')"

declare -A suitePackageList=() suiteArches=()
for version in "${versions[@]}"; do
  IFS=- read postgresVersion pgqVersion <<<"$version"

  echo " "
  echo "---- generate Dockerfile for $version ----"
  echo "postgresVersion=$postgresVersion"
  echo "pgqVersion=$pgqVersion"

  tag="${debianSuite[$postgresVersion]:-$defaultDebianSuite}"
  suite="${tag%%-slim}"

  if [ -z "${suitePackageList["$suite"]:+isset}" ]; then
    suitePackageList["$suite"]="$(curl -fsSL "${packagesBase}/${suite}-pgdg/main/binary-amd64/Packages.bz2" | bunzip2)"
  fi
  if [ -z "${suiteArches["$suite"]:+isset}" ]; then
    suiteArches["$suite"]="$(curl -fsSL "${packagesBase}/${suite}-pgdg/Release" | awk -F ':[[:space:]]+' '$1 == "Architectures" { gsub(/[[:space:]]+/, "|", $2); print $2 }')"
  fi

  postgresVersionMain="$(echo "$postgresVersion" | awk -F 'alpha|beta|rc' '{print $1}')"
  versionList="$(
    echo "${suitePackageList["$suite"]}"
    curl -fsSL "${packagesBase}/${suite}-pgdg/${postgresVersionMain}/binary-amd64/Packages.bz2" | bunzip2
  )"

  optimized=""
  if [[ "$version" =~ "alpha" || "$version" =~ "beta" || "$version" =~ "rc" || "$version" =~ "master" ]]; then
    optimized="test"
  else
    optimized="debian"
  fi
  echo "optimized=$optimized"

  debianPgqMajMin=""
  pgqMajMin="$(echo "${pgqVersion}" | cut -d. -f1).$(echo "${pgqVersion}" | cut -d. -f2)"
  echo "pgqMajMin=${pgqMajMin}"

  pgqPackageName="postgresql-${postgresVersionMain}-pgq3"
  pgqFullVersion="$(echo "$versionList" | awk -F ': ' '$1 == "Package" { pkg = $2 } $1 == "Version" && pkg == "'"$pgqPackageName"'" { print $2; exit }' || true)"
  echo "pgqPackageName=${pgqPackageName}"
  echo "pgqFullVersion=${pgqFullVersion}"

  debianPgqMajMin="$(echo "${pgqFullVersion}" | cut -d- -f1)"
  echo "debianPgqMajMin=${debianPgqMajMin}"

  if [ "$debianPgqMajMin" == "$pgqMajMin" ]; then
    echo "debian pgq version is OK "
    pgqDocSrc="${pgqFullVersion%%-*}"
  else
    echo "debian pgq is not updated, different .. "
    pgqFullVersion=""
    pgqDocSrc=""
  fi

  if [ -z "$pgqFullVersion" ]; then
    echo "skip debain version"
    # debain version not found;
    echo " # placeholder Dockerfile" >"$version/Dockerfile"
    echo " # Debian version of pgq $pgqFullVersion is not detected!" >>"$version/Dockerfile"
    echo " # This is an autogenerated message of ./update.sh " >>"$version/Dockerfile"
    rm -f "$version/*.sh"
    rm -f "$version/*.md"
    # use the default for the alpine version
    pgqFullVersion=$pgqVersion
    pgqDocSrc=$pgqVersion
  else
    (
      set -x
      cp -p docker-entrypoint-pgq.sh initdb-pgq.sh update-pgq.sh "$version/"
      cat Dockerfile.template >"$version/Dockerfile"
      sed -i 's/%%TXT_AUTOGENERATED%%/'"$autogenerated"'/g; s/%%PG_MAJOR%%/'$postgresVersion'/g; s/%%PGQ_VERSION%%/'$pgqFullVersion'/g; s/%%PGQ_GIT_HASH%%/'$pgqGitHash'/g; s/%%DEBIAN_VERSION%%/'"$suite"'/g;' "$version/Dockerfile"

      echo "| [zkoesters/postgres-pgq:${version}](${dockerhublink}${version}) | [Dockerfile](${githubrepolink}/${version}/Dockerfile) | debian:${suite} | ${postgresVersion} | ${pgqDocSrc} |" >>_dockerlists_${optimized}.md
    )
  fi

  srcVersion="${pgqFullVersion%%-*}"
  pgqSha256="$(curl -sSL "https://github.com/pgq/pgq/releases/download/v3.5.1/pgq-3.5.1.tar.gz" | sha256sum | awk '{ print $1 }')"
  pgqdSha256="$(curl -sSL "https://github.com/pgq/pgqd/releases/download/v3.5/pgqd-3.5.tar.gz" | sha256sum | awk '{ print $1 }')"

  for variant in alpine; do
    if [ ! -d "$version/$variant" ]; then
      continue
    fi
    (
      set -x
      if [ "$optimized" != "test" ]; then
        optimized="alpine"
      fi
      cp -p Dockerfile.alpine.template docker-entrypoint-pgq.sh initdb-pgq.sh update-pgq.sh "$version/$variant/"
      mv "$version/$variant/Dockerfile.alpine.template" "$version/$variant/Dockerfile"
      sed -i 's/%%TXT_AUTOGENERATED%%/'"$autogenerated"'/g; s/%%PG_MAJOR%%/'"$postgresVersion"'/g; s/%%PGQ_VERSION%%/'"$srcVersion"'/g; s/%%PGQ_SHA256%%/'"$pgqSha256"'/g; s/%%PGQD_SHA256%%/'"$pgqdSha256"'/g;' "$version/$variant/Dockerfile"

      echo "| [zkoesters/postgres-pgq:${version}-${variant}](${dockerhublink}${version}-${variant}) | [Dockerfile](${githubrepolink}/${version}/${variant}/Dockerfile) | alpine:${defaultAlpinenSuite} | ${postgresVersion} | ${pgqDocSrc} |" >>_dockerlists_${optimized}.md
    )
  done
done

echo "|-------------------------|"
echo "|-   Generated images    -|"
echo "|-------------------------|"

for optimized in debian alpine; do
  echo " "
  echo "---- ${optimized} ----"
  cat _dockerlists_${optimized}.md
done

echo " "
echo "Postprocessing todo:"
echo "- add the new versions to README.md ( manually )"
ls -la _dockerlists_*.md
echo " "
echo " - done - "
